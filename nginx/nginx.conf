# - この設定ファイルでは、Nginxが静的ファイルのリクエストを直接処理し、それ以外のリクエストはRailsアプリケーションに転送するように設定されています。また、NginxはバックエンドのRailsアプリケーションとの間でリバースプロキシとして機能し、Railsアプリケーションからのレスポンスをクライアントに返します。これにより、アプリケーションのスケーラビリティとセキュリティが向上します。

# Nginxの実行ユーザーを指定します。
user nginx;

# ワーカープロセスの数を自動で設定します（CPUコア数に基づく）。
worker_processes auto;

# エラーログの出力設定です。warnレベル以上のログを出力します。
error_log /var/log/nginx/error.log warn;

# NginxのマスタープロセスIDのファイルパスを指定します。
pid /var/run/nginx.pid;

# イベントモジュールの設定を行います。
events {
    # 単一のワーカープロセスが同時に扱えるコネクション数を設定します。
    worker_connections 1024;
}

# HTTPに関する設定を行います。
http {
  # アップストリームサーバの設定（バックエンドへの接続先）。
  upstream myapp {
    # Unixソケット経由でPumaサーバー（Ruby on Railsのアプリケーションサーバ）に接続します。
    server unix:///myapp/tmp/sockets/puma.sock;
  }

  # サーバーに関する設定を行います。
  server {
    # サーバーがリッスンするポート（ここでは標準のHTTPポート80）。
    listen 80;
    # サーバー名の設定（ここではlocalhost）。
    server_name localhost;

    # アクセスログとエラーログの出力設定。
    access_log /var/log/nginx/access.log;
    error_log  /var/log/nginx/error.log;

    # 静的ファイルのルートディレクトリを指定します。
    root /myapp/public;

    # プロキシ関連のタイムアウト設定。
    proxy_connect_timeout 600;
    proxy_read_timeout 600;
    proxy_send_timeout 600;

    # クライアントからの最大ボディサイズ。
    client_max_body_size 100m;
    # カスタムエラーページの設定。
    error_page 404 /404.html;
    error_page 500 502 503 504 /500.html;
    # Keepaliveタイムアウト値。
    keepalive_timeout 600;
    # ヘルスチェック用のパス設定。
    location /healthcheck {
      root /usr/share/nginx/html;  # ヘルスチェック用の静的ファイルを配信するディレクトリ。
      empty_gif;                   # 空のGIFを返します。これはヘルスチェック応答によく使用される軽量な方法です。
      break;                       # 他のlocationブロックへの処理の継続を防ぎます。
    }

    # 通常のリクエストを処理するための設定。
    location / {
      # 要求されたURIに対応するファイルやディレクトリが存在するか試し、なければ@myappに転送。
      try_files $uri @myapp;
    }

    # リバースプロキシ設定：バックエンドアプリケーションへリクエストを転送します。
    location @myapp {
      # プロキシされたリクエストにおける実際のクライアントIPアドレスを設定。
      proxy_set_header X-Real-IP $remote_addr;
      # 実際のクライアントIPアドレスとプロキシを経由した際のアドレスを設定。
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      # リクエストされたホスト名を設定。
      proxy_set_header Host $http_host;
      # リバースプロキシのパスを指定。Nginxがmyappへのリクエストを転送します。
      proxy_pass http://myapp;
    }
  }
}